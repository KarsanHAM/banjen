apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'io.fabric'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: "com.jaredsburrows.spoon"
apply from: '../jacoco.gradle'

def appId = "com.makingiants.android.banjotuner"
def appVersionName = "1.5.5"
def appVersionCode = 114


android {
  compileSdkVersion setup.targetSdk
  flavorDimensions "default"

  defaultConfig {
    applicationId appId
    minSdkVersion setup.minSdk
    targetSdkVersion setup.targetSdk
    versionCode appVersionCode
    versionName appVersionName

    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    // Enable just English configs for dependencies, allowing to shrink apk size more
    resConfigs "en", "pt"

    resValue "string", "ads_unit_id_banner", "${System.getenv("BANJEN_ADS_UNIT_ID_BANNER")}"
  }

  buildTypes {
    debug {
      minifyEnabled false
      useProguard false // For performance
      testCoverageEnabled = true

      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
    release {
      minifyEnabled true
      shrinkResources true
      useProguard true

      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }
  }

  packagingOptions {
    exclude 'META-INF/services/org.xmlpull.v1.XmlPullParserFactory'
  }

  signingConfigs {
    release {
      if (project.hasProperty('BANJEN_SIGN_PATH')) {
        storeFile file(project.property("BANJEN_SIGN_PATH"))
        storePassword project.property("BANJEN_SIGN_PWD")
        keyAlias project.property("BANJEN_SIGN_ALIAS")
        keyPassword project.property("BANJEN_SIGN_PWD")
      }
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  lintOptions {
    abortOnError false
  }


  // Build an instant app zip of our single APK. This saves having to create a feature module, an
  // instant app module, and a traditional application module just to get an aab and instant zip.
  applicationVariants.all { variant ->
    variant.outputs.all { output ->
      if (output.outputFile.name.endsWith('.apk')) {
        def zipInstant = tasks.create("zipInstant${variant.name.capitalize()}", Zip) {
          from(output.outputFile)
          archiveName = "instant-${output.name}.zip"
          destinationDir = output.outputFile.parentFile
        }
        zipInstant.dependsOn(output.assemble)
        tasks.getByName('assemble').dependsOn(zipInstant)
      }
    }
  }

}

def excludeAnnotations = {
  exclude group: 'com.android.support', module: 'support-annotations'
}

dependencies {
  implementation "com.android.support:appcompat-v7:${deps.supportLib}"
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$deps.kotlin"

  // Ads/Crash
  implementation 'com.crashlytics.sdk.android:crashlytics:2.9.4'
  implementation "com.google.firebase:firebase-core:${deps.firebase}", {
    exclude group: 'com.android.support'
  }
  implementation "com.google.firebase:firebase-ads:${deps.firebase}", {
    exclude group: 'com.android.support'
  }

  testImplementation 'junit:junit:4.12'
  testImplementation "org.jetbrains.kotlin:kotlin-stdlib:$deps.kotlin"
  testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$deps.kotlin"

  androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2', excludeAnnotations
  androidTestImplementation 'com.android.support.test:runner:1.0.2', excludeAnnotations
  androidTestImplementation 'com.android.support.test:rules:1.0.2', excludeAnnotations

  //androidTestImplementation 'com.squareup.spoon:spoon-client:1.7.1'
  androidTestImplementation  "com.squareup.spoon:spoon-client:2.0.0-SNAPSHOT" // For Spoon snapshot, until 2.0.0 is released
  androidTestImplementation 'com.jraska:falcon-spoon-compat:2.0.1', {
    exclude group: 'com.squareup.spoon', module: 'spoon-client'
  }
}

spoon {
  debug = true
  codeCoverage = true
  noAnimations = true
  grantAll = true
}




apply plugin: 'com.google.gms.google-services'